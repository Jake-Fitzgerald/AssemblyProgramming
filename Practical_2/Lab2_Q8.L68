00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 11/02/2024 17:46:43

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      :
00000000                             3  * Written by :
00000000                             4  * Date       :
00000000                             5  * Description:
00000000                             6  *-----------------------------------------------------------
00001000                             7      ORG    $1000
00001000                             8  START:                  ; first instruction of program
00001000                             9  
00001000                            10  * Put program code here
00001000                            11      
00001000                            12          ORG    $1000
00001000                            13  START:                  ; first instruction of program
00001000                            14   
00001000  227C 00001024             15      MOVE.L #SCORE, A1   ; Puts score values with their empty 3 bit offsets (00 00 number 00) into A1
00001006  7000                      16      MOVE.L #0, D0       ; Put literal 0 into D0 (for use later?)
00001008                            17   
00001008  2619                      18      MOVE.L (A1)+, D3    ; Add 1 bit to A1's pointer. It goes past the first offset 00 to 01.
0000100A                            19                          ; D3 now stores 01. 
0000100A  D083                      20      ADD.L D3, D0        ; D0 now stores 01.
0000100C                            21      
0000100C  2619                      22      MOVE.L (A1)+, D3    ; Add 1 bit to A1's pointer. It goes past the second offset 01 to 03.
0000100E                            23                          ; D0 stores 0 so 3 + 0 = 3.
0000100E  D083                      24      ADD.L D3, D0        ; D3 (3) + D0 (1) = 4.
00001010                            25   
00001010  2619                      26      MOVE.L (A1)+, D3    ; Add 1 bit to A1's pointer. It goes past the third offset 03 to 05.
00001012                            27                          ; The 3 D3 stored is now replaced by 5.
00001012  D083                      28      ADD.L D3, D0        ; D0 (4) + D3 (5) = 9.
00001014                            29      
00001014  2619                      30      MOVE.L (A1)+, D3    ; Add 1 bit to A1's pointer. It goes past the fourth offset 05 to 07.
00001016                            31                          ; D3 (5) is replaced by 7.
00001016  D083                      32      ADD.L D3, D0        ; D0 (9) + D3 (7) = 10? but should 16 , where does the 6 go?
00001018                            33                          ; Is it carried?
00001018                            34   
00001018  2619                      35      MOVE.L (A1)+, D3    ; Add 1 bit to A1's pointer. It goes past the fifth offset 07 to 09.
0000101A                            36                          ; D3 now stores 9.
0000101A  D083                      37      ADD.L D3, D0        ; D3(9) + D0 (10) = 19.
0000101C                            38      
0000101C  2619                      39      MOVE.L (A1)+, D3    ; Add 1 bit to A1's pointer. It goes past the sixth offset 09 to 11 (B).
0000101E                            40                          ; B in hex is 11.
0000101E  D083                      41      ADD.L D3, D0
00001020                            42   
00001020  FFFF FFFF                 43      SIMHALT
00001024                            44  * Put variables and constants here
00001024                            45   
00001024= 00000001 00000003 ...     46  SCORE   DC.L    1,  3,  5, 7,  9, 11    ; Stores blank offsets between each
0000103C                            47  
0000103C                            48  
0000103C                            49  * Put variables and constants here
0000103C                            50  
0000103C                            51      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
SCORE               1024
START               1000
